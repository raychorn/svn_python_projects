from base import transform
class trac(transform):
    def __init__(self, tree,  **tionary):
        if tionary.has_key('baseurl'):
            self.baseurl = tionary['baseurl']
        transform.__init__(self, tree)
        self.rules['b'] = ['replace', {'start':"'''", 'end':"'''"}]
        self.rules['i'] = ['replace', {'start':"''", 'end':"''"}]
        self.rules['strong'] = ['replace', {'start':"'''", 'end':"'''"}]
        self.rules['em'] = ['replace', {'start':"''", 'end':"''"}]
        self.rules['var'] = ['copy', {}]
        self.rules['h1'] = ['replace', {'start':"\n= ", 'end':" =\n"}]
        self.rules['h2'] = ['replace', {'start':"\n== ", 'end':" ==\n"}]
        self.rules['h3'] = ['replace', {'start':"\n=== ", 'end':" ===\n"}]
        self.rules['h4'] = ['replace', {'start':"\n==== ", 'end':" ====\n"}]
        self.rules['h5'] = ['replace', {'start':"\n===== ", 'end':" =====\n"}]
        self.rules['h6'] = ['replace', {'start':"\n====== ", 'end':" ======\n"}]
        self.rules['table'] = ['replace', {'start':'\n', 'end':'\n'}]
        self.rules['tr'] = ['replace', { 'start':"||", 'end':'\n'}]
        self.rules['td'] = ['replace', { 'start':"", 'end':'||'}]
        self.rules['th'] = ['replace', { 'start':"", 'end':'||'}]
        self.consume(tree)
        
    def start_td(self,element):
        print element.text.strip('\n'), element.tail

    def start_tr(self,element):
        print element.text

    def text_style(self, element):
        pass

    def text_title(self, element):
        pass
   
    def start_ul(self, element):
        self.bullet_style = '*'

    def start_ol(self, element):
        self.bullet_style = '#'

    def start_dl(self, element):
        self.bullet_style = ':'

    def start_li(self, element):
        self.content = self.content + self.bullet_style+ ' '

    def end_li(self, element):
        self.content = self.content + '\n'

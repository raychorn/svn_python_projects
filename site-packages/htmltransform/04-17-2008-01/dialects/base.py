class transform:
    def __init__(self, tree):
        self.content = ''
        self.tree = tree
        self.rules = {}

    def consume(self, element):
        tag = element.tag
        if self.rules.has_key(tag):
            if hasattr(self, self.rules[tag][0]):
                f = getattr(self, self.rules[tag][0])
                f(element, self.rules[tag][1], start=True)
        else:
            if hasattr(self, 'start_'+tag):
                f = getattr(self, 'start_'+tag)
                f(element)
        if hasattr(self, 'text_'+tag):
            f = getattr(self, 'text_'+tag)
            f(element)
        else:
            if element.text:
                self.data(element.text)



        for n in element:
            self.consume(n)
        if self.rules.has_key(tag):
            if hasattr(self, self.rules[tag][0]):
                f = getattr(self, self.rules[tag][0])
                f(element, self.rules[tag][1], start=False)
        else:
            if hasattr(self, 'end_'+tag):
                f = getattr(self, 'end_'+tag)
                f(element)
        
        if hasattr(self, 'tail_'+tag):
            f = getattr(self, 'tail_'+tag)
            f(element)
        else:
            if element.tail:
                self.data(element.tail)
        
    
    def data(self, d):
        self.content = self.content + d

    def replace(self, tag, tionary , start=False):
        if start == True:
            self.content = self.content + tionary['start']
        else:
            self.content = self.content + tionary['end']
        
    def copy(self, element, tionary, start=False):
        if start  == True:
            self.content = self.content + '<%s ' % element.tag
            for i in element.items():
                self.content = self.content + i[0] + '=' + i[1]
            self.content = self.content + '>'
        else:
            self.content = self.content + '</%s>' % element.tag
        
    def __str__(self):
        return self.content

    def __repr__(self):
        return 'wiki content --- '+self.content[0:40]

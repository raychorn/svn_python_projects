#!/usr/bin/env python
# generated by wxGlade 0.3.1 on Fri Feb  6 09:46:50 2004

from wxPython.wx import *
import dirssync,os.path,pickle

def _(txt): return txt

wxInitAllImageHandlers()

def MyLogo(parent,id):
    return  wxStaticBitmap(parent,id,wxImage('DirsSync.png',wxBITMAP_TYPE_PNG).ConvertToBitmap())

class Log(dirssync.Log,dirssync.Pickling):
    def info(self,txt):
        self.output.AppendText(self.format(txt))
	self.output.Update()
        wxYield()


class MyFrame(wxFrame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wxDEFAULT_FRAME_STYLE
        wxFrame.__init__(self, *args, **kwds)
        self.Notebook = wxNotebook(self, -1, style=0)
        self.OptionsPanel = wxPanel(self.Notebook, -1)
        self.LogPanel = wxPanel(self.Notebook, -1)
        self.TransferPanel = wxPanel(self.Notebook, -1)
        self.InputsPanel = wxPanel(self.Notebook, -1)
        
        # Menu Bar
        self.Frame_menubar = wxMenuBar()
        self.SetMenuBar(self.Frame_menubar)
        self.MnuFile = wxMenu()
        self.MnuFile.Append(11, _("New"), _("Clean current job cards"), wxITEM_NORMAL)
        self.MnuFile.Append(12, _("Open"), _("Open new job cards"), wxITEM_NORMAL)
        self.MnuFile.Append(13, _("Save"), _("Save current job cards"), wxITEM_NORMAL)
        self.MnuFile.AppendSeparator()
        self.MnuFile.Append(14, _("Exit"), _("Exit the application"), wxITEM_NORMAL)
        self.Frame_menubar.Append(self.MnuFile, _("File"))
        self.MnuHelp = wxMenu()
        self.MnuHelp.Append(21, _("About"), _("About DirsSync ..."), wxITEM_NORMAL)
        self.Frame_menubar.Append(self.MnuHelp, _("Help"))
        # Menu Bar end
        self.Frame_statusbar = self.CreateStatusBar(1, 0)
        self.MyLogo_1 = MyLogo(self.InputsPanel, -1)
        self.STLocal = wxStaticText(self.InputsPanel, -1, _("Local    "))
        self.STLocalDir = wxStaticText(self.InputsPanel, -1, _("Select local directory"))
        self.TCLocalDir = wxTextCtrl(self.InputsPanel, -1, "")
        self.BLocalDir = wxButton(self.InputsPanel, -1, _("..."))
        self.STLocalInclude = wxStaticText(self.InputsPanel, -1, _("Include Patterns / sub-directories"))
        self.TCLocalIncPatt = wxTextCtrl(self.InputsPanel, -1, _(".*,*"))
        self.TCLocalIncDirs = wxTextCtrl(self.InputsPanel, -1, "")
        self.STLocalExclude = wxStaticText(self.InputsPanel, -1, _("Exclude Patterns / sub-directories"))
        self.TCLocalExcPatt = wxTextCtrl(self.InputsPanel, -1, "")
        self.TCLocalExcDirs = wxTextCtrl(self.InputsPanel, -1, "")
        self.STRemote = wxStaticText(self.InputsPanel, -1, _("Remote"))
        self.STRemoteDir = wxStaticText(self.InputsPanel, -1, _("Select remote directory"))
        self.TCRemoteDir = wxTextCtrl(self.InputsPanel, -1, "")
        self.BRemoteDir = wxButton(self.InputsPanel, -1, _("..."))
        self.STRemoteInclude = wxStaticText(self.InputsPanel, -1, _("Include Patterns / sub-directories"))
        self.TCRemoteIncPatt = wxTextCtrl(self.InputsPanel, -1, _(".*,*"))
        self.TCRemoteIncDirs = wxTextCtrl(self.InputsPanel, -1, "")
        self.STRemoteExclude = wxStaticText(self.InputsPanel, -1, _("Exclude Patterns / sub-directories"))
        self.TCRemoteExcPatt = wxTextCtrl(self.InputsPanel, -1, "")
        self.TCRemoteExcDirs = wxTextCtrl(self.InputsPanel, -1, "")
        self.STOptions = wxStaticText(self.InputsPanel, -1, _("Options"))
        self.CBLocal2Remote = wxCheckBox(self.InputsPanel, -1, _("Local to Remote"))
        self.CBRemote2Local = wxCheckBox(self.InputsPanel, -1, _("Remote to Local"))
        self.CBDelete = wxCheckBox(self.InputsPanel, -1, _("Delete (One-way)"))
        self.CBUseforce = wxCheckBox(self.InputsPanel, -1, _("Use Force"))
        self.TCMaxDelta = wxTextCtrl(self.InputsPanel, -1, "")
        self.STMaxDelta = wxStaticText(self.InputsPanel, -1, _("Max Delta"))
        self.BAddJob = wxButton(self.InputsPanel, -1, _("Add Job"))
        self.BEditJob = wxButton(self.InputsPanel, -1, _("Edit Job"))
        self.BDeleteJob = wxButton(self.InputsPanel, -1, _("Delete Job"))
        self.BNext = wxButton(self.InputsPanel, -1, _("Next>>"))
        self.LCJobs = wxListCtrl(self.InputsPanel, -1, style=wxLC_REPORT|wxSUNKEN_BORDER)
        self.LCTransferList = wxListCtrl(self.TransferPanel, -1, style=wxLC_REPORT|wxSUNKEN_BORDER)
        self.BSynchronize = wxButton(self.TransferPanel, -1, _(" SYNCHONIZE "))
        self.TCLog = wxTextCtrl(self.LogPanel, -1, "", style=wxTE_MULTILINE|wxHSCROLL|wxTE_RICH)
        self.BClear = wxButton(self.LogPanel, -1, _("Clear"))
        self.CComparisonMethod = wxChoice(self.OptionsPanel, -1, choices=[_("Comparison based on the modification time"), _("Comparison based on size(Bigger is the winner)")])

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.__initialize()
        self.__set_event()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("DirsSync"))
        self.SetSize((732, 567))
        self.Frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        Frame_statusbar_fields = [""]
        for i in range(len(Frame_statusbar_fields)):
            self.Frame_statusbar.SetStatusText(Frame_statusbar_fields[i], i)
        self.STLocal.SetSize((60, 20))
        self.STRemote.SetSize((60, 20))
        self.TCMaxDelta.SetSize((25, 25))
        self.BAddJob.Enable(0)
        self.BEditJob.Enable(0)
        self.BDeleteJob.Enable(0)
        self.BNext.SetSize((80, 60))
        self.BNext.Enable(0)
        self.CComparisonMethod.SetSelection(0)
        # end wxGlade
        icon=wxIcon('dirssync.xpm',wxBITMAP_TYPE_XPM)
        self.SetIcon(icon)

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        Sizer_frame = wxBoxSizer(wxVERTICAL)
        Sizer_OptionsPanel = wxBoxSizer(wxVERTICAL)
        SizerComparisonMethod = wxStaticBoxSizer(wxStaticBox(self.OptionsPanel, -1, _("File comparison method")), wxHORIZONTAL)
        Sizer_LogPanel = wxBoxSizer(wxVERTICAL)
        Sizer_TransferPanel = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel = wxFlexGridSizer(3, 1, 5, 0)
        Sizer_InputsPanel_Global = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_CMDs = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_CMDs_Cards = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Options = wxBoxSizer(wxHORIZONTAL)
        Sizer_Parameters_MaxDelta = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Remote = wxFlexGridSizer(1, 4, 0, 0)
        Sizer_InputsPanel_Remote_Exc_v = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_Remote_Exc_h = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Remote_Inc_v = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_Remote_Inc_h = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Remote_Dir_v = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_Remote_Dir_h = wxBoxSizer(wxHORIZONTAL)
        Sizer_inputsPanel_Local = wxFlexGridSizer(1, 4, 0, 0)
        Sizer_InputsPanel_Local_Exc_v = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_Local_Exc_h = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Local_Inc_v = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_Local_Inc_h = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Local_Dir_v = wxBoxSizer(wxVERTICAL)
        Sizer_InputsPanel_Local_Dir_h = wxBoxSizer(wxHORIZONTAL)
        Sizer_InputsPanel_Global.Add(self.MyLogo_1, 0, wxRIGHT|wxTOP|wxALIGN_RIGHT, 5)
        Sizer_inputsPanel_Local.Add(self.STLocal, 0, wxLEFT|wxALIGN_BOTTOM, 5)
        Sizer_InputsPanel_Local_Dir_v.Add(self.STLocalDir, 0, wxALL, 4)
        Sizer_InputsPanel_Local_Dir_h.Add(self.TCLocalDir, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Local_Dir_h.Add(self.BLocalDir, 0, 0, 0)
        Sizer_InputsPanel_Local_Dir_v.Add(Sizer_InputsPanel_Local_Dir_h, 1, wxEXPAND, 0)
        Sizer_inputsPanel_Local.Add(Sizer_InputsPanel_Local_Dir_v, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Local_Inc_v.Add(self.STLocalInclude, 0, wxALL, 5)
        Sizer_InputsPanel_Local_Inc_h.Add(self.TCLocalIncPatt, 1, 0, 0)
        Sizer_InputsPanel_Local_Inc_h.Add(self.TCLocalIncDirs, 1, 0, 0)
        Sizer_InputsPanel_Local_Inc_v.Add(Sizer_InputsPanel_Local_Inc_h, 1, wxLEFT|wxEXPAND, 5)
        Sizer_inputsPanel_Local.Add(Sizer_InputsPanel_Local_Inc_v, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Local_Exc_v.Add(self.STLocalExclude, 0, wxALL, 5)
        Sizer_InputsPanel_Local_Exc_h.Add(self.TCLocalExcPatt, 1, 0, 0)
        Sizer_InputsPanel_Local_Exc_h.Add(self.TCLocalExcDirs, 1, wxRIGHT, 5)
        Sizer_InputsPanel_Local_Exc_v.Add(Sizer_InputsPanel_Local_Exc_h, 1, wxLEFT|wxEXPAND, 5)
        Sizer_inputsPanel_Local.Add(Sizer_InputsPanel_Local_Exc_v, 1, wxEXPAND, 0)
        Sizer_inputsPanel_Local.AddGrowableCol(1)
        Sizer_inputsPanel_Local.AddGrowableCol(2)
        Sizer_inputsPanel_Local.AddGrowableCol(3)
        Sizer_InputsPanel_Global.Add(Sizer_inputsPanel_Local, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Remote.Add(self.STRemote, 0, wxLEFT|wxALIGN_BOTTOM, 5)
        Sizer_InputsPanel_Remote_Dir_v.Add(self.STRemoteDir, 0, wxALL, 5)
        Sizer_InputsPanel_Remote_Dir_h.Add(self.TCRemoteDir, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Remote_Dir_h.Add(self.BRemoteDir, 0, 0, 0)
        Sizer_InputsPanel_Remote_Dir_v.Add(Sizer_InputsPanel_Remote_Dir_h, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Remote.Add(Sizer_InputsPanel_Remote_Dir_v, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Remote_Inc_v.Add(self.STRemoteInclude, 0, wxALL, 5)
        Sizer_InputsPanel_Remote_Inc_h.Add(self.TCRemoteIncPatt, 1, 0, 0)
        Sizer_InputsPanel_Remote_Inc_h.Add(self.TCRemoteIncDirs, 1, 0, 0)
        Sizer_InputsPanel_Remote_Inc_v.Add(Sizer_InputsPanel_Remote_Inc_h, 1, wxLEFT|wxEXPAND, 5)
        Sizer_InputsPanel_Remote.Add(Sizer_InputsPanel_Remote_Inc_v, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Remote_Exc_v.Add(self.STRemoteExclude, 0, wxALL, 5)
        Sizer_InputsPanel_Remote_Exc_h.Add(self.TCRemoteExcPatt, 1, 0, 0)
        Sizer_InputsPanel_Remote_Exc_h.Add(self.TCRemoteExcDirs, 1, wxRIGHT, 5)
        Sizer_InputsPanel_Remote_Exc_v.Add(Sizer_InputsPanel_Remote_Exc_h, 1, wxLEFT|wxEXPAND, 5)
        Sizer_InputsPanel_Remote.Add(Sizer_InputsPanel_Remote_Exc_v, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Remote.AddGrowableCol(1)
        Sizer_InputsPanel_Remote.AddGrowableCol(2)
        Sizer_InputsPanel_Remote.AddGrowableCol(3)
        Sizer_InputsPanel_Global.Add(Sizer_InputsPanel_Remote, 1, wxEXPAND, 0)
        Sizer_InputsPanel_Options.Add(self.STOptions, 0, wxRIGHT, 10)
        Sizer_InputsPanel_Options.Add(self.CBLocal2Remote, 0, wxLEFT|wxRIGHT, 5)
        Sizer_InputsPanel_Options.Add(self.CBRemote2Local, 0, wxLEFT|wxRIGHT, 5)
        Sizer_InputsPanel_Options.Add(self.CBDelete, 0, wxLEFT|wxRIGHT, 5)
        Sizer_InputsPanel_Options.Add(self.CBUseforce, 0, wxLEFT|wxRIGHT, 5)
        Sizer_Parameters_MaxDelta.Add(self.TCMaxDelta, 0, wxTOP, 2)
        Sizer_Parameters_MaxDelta.Add(self.STMaxDelta, 0, wxTOP, 2)
        Sizer_InputsPanel_Options.Add(Sizer_Parameters_MaxDelta, 0, wxLEFT|wxRIGHT|wxEXPAND, 5)
        Sizer_InputsPanel_Global.Add(Sizer_InputsPanel_Options, 1, wxTOP, 10)
        Sizer_InputsPanel_CMDs.Add(50, 20, 0, 0, 0)
        Sizer_InputsPanel_CMDs_Cards.Add(self.BAddJob, 0, wxLEFT|wxRIGHT|wxALIGN_BOTTOM, 5)
        Sizer_InputsPanel_CMDs_Cards.Add(self.BEditJob, 0, wxLEFT|wxRIGHT|wxALIGN_BOTTOM, 5)
        Sizer_InputsPanel_CMDs_Cards.Add(self.BDeleteJob, 0, wxLEFT|wxRIGHT|wxALIGN_BOTTOM, 5)
        Sizer_InputsPanel_CMDs.Add(Sizer_InputsPanel_CMDs_Cards, 1, wxEXPAND, 0)
        Sizer_InputsPanel_CMDs.Add(self.BNext, 0, wxRIGHT|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5)
        Sizer_InputsPanel_Global.Add(Sizer_InputsPanel_CMDs, 1, wxEXPAND, 0)
        Sizer_InputsPanel.Add(Sizer_InputsPanel_Global, 0, wxEXPAND, 0)
        Sizer_InputsPanel.Add(self.LCJobs, 2, wxEXPAND, 0)
        self.InputsPanel.SetAutoLayout(1)
        self.InputsPanel.SetSizer(Sizer_InputsPanel)
        Sizer_InputsPanel.Fit(self.InputsPanel)
        Sizer_InputsPanel.SetSizeHints(self.InputsPanel)
        Sizer_InputsPanel.AddGrowableRow(1)
        Sizer_InputsPanel.AddGrowableCol(0)
        Sizer_TransferPanel.Add(self.LCTransferList, 1, wxEXPAND, 0)
        Sizer_TransferPanel.Add(self.BSynchronize, 0, wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL, 10)
        self.TransferPanel.SetAutoLayout(1)
        self.TransferPanel.SetSizer(Sizer_TransferPanel)
        Sizer_TransferPanel.Fit(self.TransferPanel)
        Sizer_TransferPanel.SetSizeHints(self.TransferPanel)
        Sizer_LogPanel.Add(self.TCLog, 1, wxEXPAND, 0)
        Sizer_LogPanel.Add(self.BClear, 0, wxALL, 10)
        self.LogPanel.SetAutoLayout(1)
        self.LogPanel.SetSizer(Sizer_LogPanel)
        Sizer_LogPanel.Fit(self.LogPanel)
        Sizer_LogPanel.SetSizeHints(self.LogPanel)
        SizerComparisonMethod.Add(self.CComparisonMethod, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 0)
        Sizer_OptionsPanel.Add(SizerComparisonMethod, 0, wxTOP|wxBOTTOM, 5)
        self.OptionsPanel.SetAutoLayout(1)
        self.OptionsPanel.SetSizer(Sizer_OptionsPanel)
        Sizer_OptionsPanel.Fit(self.OptionsPanel)
        Sizer_OptionsPanel.SetSizeHints(self.OptionsPanel)
        self.Notebook.AddPage(self.InputsPanel, _("Inputs"))
        self.Notebook.AddPage(self.TransferPanel, _("Transfer list"))
        self.Notebook.AddPage(self.LogPanel, _("Log"))
        self.Notebook.AddPage(self.OptionsPanel, _("Options"))
        Sizer_frame.Add(wxNotebookSizer(self.Notebook), 1, wxEXPAND, 0)
        self.SetAutoLayout(1)
        self.SetSizer(Sizer_frame)
        self.Layout()
        # end wxGlade

    def __initialize(self):
        self.CBLocal2Remote.SetValue(True)
        self.CBRemote2Local.SetValue(True)
        self.TCMaxDelta.SetValue("0")
        self.jobslist=dirssync.Jobs()
        self.LCJobs.currentItemEdited=None
        self.LCJobs.InsertColumn(0,_("Local"))
        self.LCJobs.InsertColumn(1,_("Remote"))
        self.LCTransferList.InsertColumn(0,_("Transfer"))
        self.LCTransferList.InsertColumn(1,_("Action"))
        self.LCTransferList.InsertColumn(2,_("File"))
        self.LCTransferList.InsertColumn(3,_("From"))
        self.LCTransferList.InsertColumn(4,_("To"))
	#sys.stdout=self.TCLog
	self.methods=["DateComp","SizeComp"]
	self.CComparisonMethod.itemselected=0
	self.CBUseforce.Enable(0)
	self.jobedited=None

    def __set_event(self):
        EVT_BUTTON(self,self.BLocalDir.GetId(),self.OnBLocalDir)
        EVT_BUTTON(self,self.BRemoteDir.GetId(),self.OnBRemoteDir)
        EVT_TEXT(self,self.TCLocalDir.GetId(),self.LCLocalorRemoteChanged)
        EVT_TEXT(self,self.TCRemoteDir.GetId(),self.LCLocalorRemoteChanged)
        EVT_BUTTON(self,self.BAddJob.GetId(),self.OnAddJob)
        EVT_LIST_ITEM_SELECTED(self, self.LCJobs.GetId(), self.OnLCJobsItemSelected)
        EVT_LIST_ITEM_DESELECTED(self, self.LCJobs.GetId(), self.OnLCJobsItemDeSelected)
        EVT_BUTTON(self,self.BEditJob.GetId(),self.OnEditJob)
        EVT_BUTTON(self,self.BDeleteJob.GetId(),self.OnDeleteJob)
        EVT_BUTTON(self,self.BNext.GetId(),self.OnNext)
        EVT_BUTTON(self,self.BClear.GetId(),self.OnClear)
        EVT_MENU(self,11,self.MnuNew)
        EVT_MENU(self,12,self.MnuOpen)
        EVT_MENU(self,13,self.MnuSave)
        EVT_MENU(self,14,self.MnuExit)
        EVT_MENU(self,21,self.MnuAbout)

        EVT_LIST_ITEM_SELECTED(self, self.LCTransferList.GetId(), self.OnLCTransferListItemSelected)
	EVT_LEFT_DCLICK(self.LCTransferList, self.OnLCTransferListDClick)

	EVT_BUTTON(self,self.BSynchronize.GetId(),self.OnSynchronize)
	
	EVT_CHOICE(self,self.CComparisonMethod.GetId(),self.OnCComparisonMethod)

# end of class MyFrame

#Menu
    def MnuAbout(self,event):
        dlg = wxMessageDialog(self, _("Directories Synchronizer is a Python and wxPython application\nwritten by Vincent Delft under the GPL license!\n\nFeel free to propose your ideas to improve this application\nby visiting http://DirsSync.sourceforge.net\nor\nby sending a Email at vincent_delft@yahoo.com"),
              _("About Directories Synchronizer"), wxOK | wxICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()

    def MnuNew(self,event):
        self.LCJobs.DeleteAllItems()
	self.jobslist=[]
	self.TCLog.Clear()
	self.LCTransferList.DeleteAllItems()
	self.cleanInputsPanelTCs()
	self.jobedited=None

    def MnuOpen(self,event):
        if self.jobedited!=None:
            dlgW = wxMessageDialog(self, "You will looze the current Job card edited. Do you want to continue ?", "Warning", wxYES | wxNO | wxICON_EXCLAMATION)
            if dlgW.ShowModal()!=wxID_YES:
	        dlgW.Destroy()
		return
	    dlgW.Destroy()
        dlg = wxFileDialog(self, _("Choose a file"), ".", "", "*.sync", wxOPEN)
        if dlg.ShowModal() == wxID_OK:
            #self.InputsPanel.DeleteAllItems()
            f=open(dlg.GetPath(),"r")
            self.jobslist=pickle.load(f)
            #self.IntoListCtrl(listdirs)
            f.close()
        dlg.Destroy()
        i=0
        for job in self.jobslist:
            self.LCJobs.InsertStringItem(i, job.local.dir )
            self.LCJobs.SetStringItem(i,1, job.remote.dir )
            self.LCJobs.SetColumnWidth(0, wxLIST_AUTOSIZE)
            self.LCJobs.SetColumnWidth(1, wxLIST_AUTOSIZE)
	    #we must re-assign loggin class because this was not pickled
	    job.local._log=Log(self.TCLog)
	    job.remote._log=Log(self.TCLog)
            i+=1

        self.BNext.Enable(1)

    def MnuSave(self,event):
        if self.jobedited!=None:
            dlgW = wxMessageDialog(self, "You will looze the current Job card edited. Do you want to continue ?", "Warning", wxYES | wxNO | wxICON_EXCLAMATION)
            if dlgW.ShowModal()!=wxID_YES:
	        dlgW.Destroy()
		return
	    dlgW.Destroy()
        dlg = wxFileDialog(self, _("Choose a file"), ".", "", "*.sync", wxSAVE | wxOVERWRITE_PROMPT )
        if dlg.ShowModal() == wxID_OK:
            #listdirs = self.FromListCtrl()
            f=open(dlg.GetPath(),"w")
            pickle.dump(self.jobslist,f)
            f.close()
        dlg.Destroy()
    def MnuExit(self,event):
        if self.jobedited!=None:
            dlgW = wxMessageDialog(self, "You will looze the current Job card edited. Do you want to continue ?", "Warning", wxYES | wxNO | wxICON_EXCLAMATION)
            if dlgW.ShowModal()!=wxID_YES:
	        dlgW.Destroy()
		return
	    dlgW.Destroy()
        self.Close()

#PanelInputs 
    def cleanInputsPanelTCs(self):
        self.TCLocalDir.SetValue('')
        self.TCRemoteDir.SetValue('')
	self.TCLocalIncPatt.SetValue('.*,*')
	self.TCRemoteIncPatt.SetValue('.*,*')
	self.TCLocalExcPatt.SetValue('')
	self.TCRemoteExcPatt.SetValue('')
	self.TCLocalIncDirs.SetValue('')
	self.TCRemoteIncDirs.SetValue('')
	self.TCLocalExcDirs.SetValue('')
	self.TCRemoteExcDirs.SetValue('')
	self.CBLocal2Remote.SetValue(1)
	self.CBRemote2Local.SetValue(1)
	self.CBDelete.SetValue(0)
	self.TCMaxDelta.SetValue("0")

    def OnBLocalDir(self,event):
        dlg = wxDirDialog(self)
        if dlg.ShowModal() == wxID_OK:
            self.TCLocalDir.SetValue(dlg.GetPath())
        dlg.Destroy()
    def OnBRemoteDir(self,event):
        dlg = wxDirDialog(self)
        if dlg.ShowModal() == wxID_OK:
            self.TCRemoteDir.SetValue(dlg.GetPath())
        dlg.Destroy()
    def LCLocalorRemoteChanged(self,event):
        self._validate_paths()
        if self.TCLocalDir.GetValue() and self.TCRemoteDir.GetValue(): 
            self.BAddJob.Enable(1)
        
    def _validate_paths(self):
        if self.TCLocalDir.GetValue().strip() and (self.TCLocalDir.GetValue() == self.TCRemoteDir.GetValue()):
            msg = _("The local and remote directories are the same")
            title=_("Input mismatch")
            dlgW = wxMessageDialog(self, msg, title, wxOK | wxICON_EXCLAMATION)
            dlgW.ShowModal()
            dlgW.Destroy()
            

    def OnAddJob(self,event):
        msg=None
        if not os.path.isdir(self.TCLocalDir.GetValue()):
            msg = _("Local is not an existing directory. Can you update ?")
        if not os.path.isdir(self.TCRemoteDir.GetValue()):
            msg = _("Remote is not an existing directory. Can you update ?")
        if (self.CBLocal2Remote.GetValue()==0 and self.CBRemote2Local.GetValue()==0):
            msg = _("Wake UP!!!!\nDirsSync must to know if you want synchronise from Locale to remote and/or remote to local. Thanks")
        if (self.CBLocal2Remote.GetValue() and self.CBRemote2Local.GetValue() and self.CBDelete.GetValue()):
            msg = _("Delete is a one way delete!!!\nPlease select 'local to remote' OR 'remote to local'")
        if msg:
            title=_("Input mismatch")
            dlgW = wxMessageDialog(self, msg, title, wxOK | wxICON_EXCLAMATION)
            dlgW.ShowModal()
            dlgW.Destroy()
            return
                
        incpatt=self.TCLocalIncPatt.GetValue().split(',')
        incdirs=self.TCLocalIncDirs.GetValue().split(',')
        excpatt=self.TCLocalExcPatt.GetValue().split(',')
        excdirs=self.TCLocalExcDirs.GetValue().split(',')
        dirlocal=dirssync.DirDesc(self.TCLocalDir.GetValue(),include_patt=incpatt,include_dirs=incdirs,exclude_patt=excpatt,exclude_dirs=excdirs,log=Log(self.TCLog))
        incpatt=self.TCRemoteIncPatt.GetValue().split(',')
        incdirs=self.TCRemoteIncDirs.GetValue().split(',')
        excpatt=self.TCRemoteExcPatt.GetValue().split(',')
        excdirs=self.TCRemoteExcDirs.GetValue().split(',')
        dirremote=dirssync.DirDesc(self.TCRemoteDir.GetValue(),include_patt=incpatt,include_dirs=incdirs,exclude_patt=excpatt,exclude_dirs=excdirs,log=Log(self.TCLog))
        options=self.get_options()
        if self.jobedited!=None:
            x=self.jobedited
            self.LCJobs.SetStringItem(x,0, self.TCLocalDir.GetValue() )
            self.LCJobs.SetStringItem(x,1, self.TCRemoteDir.GetValue() )
            self.jobslist[x]=dirssync.Job(dirlocal,dirremote,options)
	    self.jobedited=None
        else:
            x=self.LCJobs.GetItemCount()
            self.LCJobs.InsertStringItem(x,self.TCLocalDir.GetValue() )
            self.LCJobs.SetStringItem(x,1, self.TCRemoteDir.GetValue() )
            self.jobslist.append( dirssync.Job(dirlocal,dirremote,options))
        self.LCJobs.SetColumnWidth(0, wxLIST_AUTOSIZE)
        self.LCJobs.SetColumnWidth(1, wxLIST_AUTOSIZE)
        self.cleanInputsPanelTCs()
        self.BAddJob.Enable(0)
        self.LCJobs.currentItemEdited=None
        self.BNext.Enable(1)
    def OnLCJobsItemSelected(self,event):
        self.BEditJob.Enable(1)
        self.BDeleteJob.Enable(1)
        self.LCJobs.currentItemSelected=event.m_itemIndex
    def OnLCJobsItemDeSelected(self,event):
        self.BEditJob.Enable(0)
        self.BDeleteJob.Enable(0)
        self.LCJobs.currentItemSelected=None
    def get_options(self):
        result={}
        result['local2remote']=self.CBLocal2Remote.GetValue()
        result['remote2local']=self.CBRemote2Local.GetValue()
        result['delete']=self.CBDelete.GetValue()
        result['maxdelta']=int(self.TCMaxDelta.GetValue())
        return result
    def OnEditJob(self,event):
        if self.jobedited!=None:
            dlgW = wxMessageDialog(self, "You will looze the current Job card edited. Do you want to continue ?", "Warning", wxYES | wxNO | wxICON_EXCLAMATION)
            if dlgW.ShowModal()!=wxID_YES:
	        dlgW.Destroy()
		return
	    dlgW.Destroy()
        n=self.LCJobs.currentItemEdited=self.LCJobs.currentItemSelected
	job=self.jobslist[n]
	loc_inputs=job.getlocalinputs()
	rem_inputs=job.getremoteinputs()
	options=job.getoptions()
        self.TCLocalDir.SetValue(loc_inputs['dir'])
        self.TCRemoteDir.SetValue(rem_inputs['dir'])
	self.TCLocalIncPatt.SetValue(",".join(loc_inputs['include_patt']))
	self.TCRemoteIncPatt.SetValue(",".join(rem_inputs['include_patt']))
	self.TCLocalExcPatt.SetValue(",".join(loc_inputs['exclude_patt']))
	self.TCRemoteExcPatt.SetValue(",".join(rem_inputs['exclude_patt']))
	self.TCLocalIncDirs.SetValue(",".join(loc_inputs['include_dirs']))
	self.TCRemoteIncDirs.SetValue(",".join(rem_inputs['include_dirs']))
	self.TCLocalExcDirs.SetValue(",".join(loc_inputs['exclude_dirs']))
	self.TCRemoteExcDirs.SetValue(",".join(rem_inputs['exclude_dirs']))
	self.CBLocal2Remote.SetValue(options['local2remote'])
	self.CBRemote2Local.SetValue(options['remote2local'])
	self.CBDelete.SetValue(options['delete'])
	self.TCMaxDelta.SetValue(str(options['maxdelta']))
	self.jobedited=n

    def OnDeleteJob(self,event):
        if self.jobedited!=None:
            dlgW = wxMessageDialog(self, "You will looze the current Job card edited. Do you want to continue ?", "Warning", wxYES | wxNO | wxICON_EXCLAMATION)
            if dlgW.ShowModal()!=wxID_YES:
	        dlgW.Destroy()
		return
	    dlgW.Destroy()
        self.LCJobs.DeleteItem(self.LCJobs.currentItemSelected)
        self.jobslist.pop(self.LCJobs.currentItemSelected)
        if self.LCJobs.GetItemCount()==0:
            self.BNext.Enable(0)
    def OnNext(self,event):
        if self.jobedited!=None:
            dlgW = wxMessageDialog(self, "You will looze the current Job card edited. Do you want to continue ?", "Warning", wxYES | wxNO | wxICON_EXCLAMATION)
            if dlgW.ShowModal()!=wxID_YES:
	        dlgW.Destroy()
		return
	    dlgW.Destroy()
        self.LCTransferList.DeleteAllItems()
        self.Notebook.SetSelection(2)
        for job in self.jobslist:
            self.comp=eval('dirssync.%s(job,log=Log(self.TCLog))' % self.methods[self.CComparisonMethod.itemselected] )
	    Log(self.TCLog).info("Preparing results for display:  ")
	    wxYield()
	    i=0
            #we must remove the \n (or \r\n for Windows)
	    pos_from=self.TCLog.GetLastPosition()-2
	    results=self.comp.getresult()
            for res in results:
	        txt="%2.2d%%" % ((i+1)*100.0/len(results))
		pos_to=self.TCLog.GetLastPosition()
		self.TCLog.Replace(pos_from,pos_to,txt)
	        wxYield()
                self.LCTransferList.InsertStringItem(i,_("yes"))
                self.LCTransferList.SetStringItem(i,1,res[0])
                self.LCTransferList.SetStringItem(i,2,res[1])
                self.LCTransferList.SetStringItem(i,3,res[2])
                self.LCTransferList.SetStringItem(i,4,res[3])
                i+=1
                self.LCTransferList.SetColumnWidth(1, wxLIST_AUTOSIZE)
                self.LCTransferList.SetColumnWidth(2, wxLIST_AUTOSIZE)
                self.LCTransferList.SetColumnWidth(3, wxLIST_AUTOSIZE)
                self.LCTransferList.SetColumnWidth(4, wxLIST_AUTOSIZE)
	    self.TCLog.AppendText('\n')
	Log(self.TCLog).info("COMPLETE")
	wxYield()
        self.Notebook.SetSelection(1)

#TransferList
    def OnLCTransferListItemSelected(self,event):
        self.LCTransferList.currentItemSelected = event.m_itemIndex

    def OnLCTransferListDClick(self,event):
        if self.LCTransferList.GetItemText(self.LCTransferList.currentItemSelected)==_("yes"):
            OppositeValue = _("no")
        else:
            OppositeValue = _("yes")

        self.LCTransferList.SetItemText(self.LCTransferList.currentItemSelected,OppositeValue)

    def OnSynchronize(self,event):
        self.Notebook.SetSelection(2)
        actions=[]
	for i in range(self.LCTransferList.GetItemCount()):
	    if self.LCTransferList.GetItemText(i)==_("yes"):
	        actions.append(1)
	    else:
	        actions.append(0)
        self.comp.perform(actions)
        self.Notebook.SetSelection(0)

#Options
    def OnCComparisonMethod(self,event):
	self.CComparisonMethod.itemselected=event.GetSelection()
    def OnClear(self,event):
	self.TCLog.Clear()


# vim:et

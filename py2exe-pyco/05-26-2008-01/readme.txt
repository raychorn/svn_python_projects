Introduction
------------
A solution for single file executables using NSIS is here:
http://starship.python.net/crew/theller/moin.cgi/SingleFileExecutable

But it has a problem. you can't pass command line arguments and do not
output anything to stdout. But i needed to make a command line tool...

Then there is pyco (http://www.pythonapocrypha.com/projects/pyco/)
It's an exe stub that unzips its attached payload to a temp dir and invokes
python. Dave (pyco author) provides a python tool that zips up a folder and
makes the exe.

It has some nice properties:
- zlib is staticaly linked to the executable, absolutely no other DLL is
  required (appart from the standard windows ones that everyone has
  anyway)
- It loads the python library dynamicaly. (means it's not linked against
  python23.dll. This makes it possible to extract the python DLL before
  accessing it. It's also very flexible, it works with any python 
  version in theory, but the DLL name is a hardcoded string in the stub.
  the setup script could be made aware of that and patch the number)

I fixed some issues (error reporting, runs a specific file/function,
import site, dangerous cleanup method, only python21, the "if" with ReadTOC
was realy broken, relative paths). Then i use py2exe to prepare the
distribution. A simple test app with ctypes and one dialog box compresses
to 550kB in a single file.

Changes to pyco i made:
- Chdir to tempdir before cleaning up (important when client app changes
  the current dir...)
- Execute the module and not a specific function
- The module executed is "_pyco_loader.py" (which is autogenerated by
  the setup.py script)
- Py_NoSiteFlag is set to prevent "import site" (and the warning and the
  console because its not found.)
- Compiling with cygwin/mingw
- Console and windows stubs (pycostub.exe pycostub_w.exe) this allows to
  make command line tools with or without the dos box, or windows only
  apps (like py2exe).

Example setup.py:
- Runs py2exe to collect all the required files and then thows away the
  .exe file (pyco runs the python source directly)
- Generate the _pyco_loader.py which sets up the import paths and then
  executes the users module. It also sets the current directory to the
  exes location instead of the temp dir. The environ var PYTHONHOME is
  set to the temp dir location.

Remaining issues:
- Set the exes icon
- Copy pyo/pyc main file instead of py
- Patch the python DLL name in the stub with the name of the current
  python version
- Integration in py2exes distutils build command would be nice.


Build Notes
-----------
Most user won't have a need to do this.

Just run "make" to rebuild the exe stubs. Requirements:
 - cygwin or mingw installation (gcc-mingw in cygwin)
 - zlib development (mingw-zlib in cygwin)

History
-------
2004.12.08
    - first release
    
2004.12.09
    - fixed path issues


Chris <cliechti@gmx.net>